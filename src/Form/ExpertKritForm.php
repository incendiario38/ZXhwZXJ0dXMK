<?php


namespace App\Form;


use App\Entity\ExpKritLek;
use App\Entity\ExpKritStr;
use App\Entity\ExpKritUsl;
use App\Entity\ExpKritZag;
use App\Entity\ExpStdMkb;
use App\Entity\ExpStdUsl;
use App\Entity\ExtStd;
use Doctrine\ORM\EntityManager;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class ExpertKritForm extends AbstractType
{
    const NAME = 'expert_krit';

    public function getBlockPrefix()
    {
        return self::NAME; // TODO: Change the autogenerated stub
    }


    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        /** @var EntityManager $em */
        $em = $options['em'];
        $data = $options['data'] ?? [];

        $expStd = $em->getRepository(ExtStd::class)->findAll();

        $builder
            ->add('expStd', ChoiceType::class, [
                'label' => 'Стандарт',
                'choices' => $expStd,
                'choice_value' => 'id',
                'choice_label' => function(?ExtStd $category) {
                    return $category ? $category->getStd(): '';
                },
                'multiple' => false,
                'placeholder' => 'Выберите стандарт',
                'label_attr' => [
                    'autocomplete' => 'off',
                ],
                'attr' => [
                    'data-width' => "100%",
                    'class' => 'selectpicker',
                    'data-live-search' => true,
                    'autocomplete' => 'off',
                    'onchange' => 'this.form.submit()'
                ],
            ]);

        if (isset($data['expStd']) && ! empty($data['expStd'])) {
            $expKritZagAll = $em->getRepository(ExpKritZag::class)->getStd($data['expStd']);

            $builder->add('krit_zag', ChoiceType::class, [
                'label' => 'Группа критериев',
                'choices' => $expKritZagAll,
                'choice_value' => 'id',
                'choice_label' => function (?ExpKritZag $category) {
                    return $category ? \mb_substr($category->getZag() . ' ' . $category->getKrit(),0, 120) . '...' : '';
                },
                'multiple' => false,
                'placeholder' => 'Выберите группу критериев',
                'label_attr' => [
                    'autocomplete' => 'off',
                ],
                'attr' => [
                    'data-width' => "100%",
                    'class' => 'selectpicker',
                    'data-live-search' => true,
                    'autocomplete' => 'off',
                    'onchange' => 'this.form.submit()',
                ],
            ]);
        }


        if (isset($data['krit_zag']) && ! empty($data['krit_zag'])) {
            $expKritZag = $data['krit_zag'] ?? null;

            $list_krit_str = $em->getRepository(ExpKritStr::class)->findBy([
                'idZag' => $expKritZag,
            ], ['nom' => 'ASC']);

            $builder->add('krit_str', ChoiceType::class, [
                'label' => 'Критерии',
                'choices' => $list_krit_str,
                'choice_value' => 'id',
                'choice_label' => function (?ExpKritStr $category) {
                    return $category ? \mb_substr($category->getNom() . ' ' . $category->getKrit(),0, 120) . '...' : '';
                },
                'multiple' => false,
                'placeholder' => 'Выберите критерий',
                'label_attr' => [
                    'autocomplete' => 'off',
                ],
                'attr' => [
                    'data-width' => "100%",
                    'class' => 'selectpicker',
                    'data-live-search' => true,
                    'autocomplete' => 'off',
                    'onchange' => 'this.form.submit()',
                ],
            ]);
        }

        if (isset($data['krit_str']) && ! empty($data['krit_str'])) {

            $builder->add('usl', CollectionType::class, [
                'entry_type' => ExpKritUslType::class,
                'allow_add' => !$options['lock'],
                'entry_options' => ['em' => $em,
                    'std' => $data['expStd'],
                    'lock' => $options['lock']],
                'prototype' => true,
                'label' => false,
            ]);

            $builder->add('lek', CollectionType::class, [
                'entry_type' => ExpKritLekType::class,
                'allow_add' => !$options['lock'],
                'entry_options' => ['em' => $em,
                    'std' => $data['expStd'],
                    'lock' => $options['lock']
                ],
                'prototype' => true,
                'label' => false,
            ]);
        }
    }


    /**
     * @param OptionsResolver $resolver
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            'validation_groups' => false,
            'lock' => false,
        ]);

        $resolver->setRequired('em');
    }
}